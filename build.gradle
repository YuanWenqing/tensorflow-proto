buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:$protobufPluginVersion"
    }
}

subprojects {
    group = 'xyz.codemeans.tensorflow4j'
    version = '1.12.0'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    apply plugin: "java"
    apply plugin: 'java-library'

    // protobuf
    apply plugin: "com.google.protobuf"
    protobuf {
        generatedFilesBaseDir = "$projectDir/gen/"
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:$grpcProtocPluginVersion"
            }
        }
        generateProtoTasks {
            ofSourceSet('main')
            all().each { task ->
                task.plugins {
                    grpc {
                        outputSubDir = "java"
                    }
                }
            }
        }
    }
    clean {
        delete protobuf.generatedFilesBaseDir
    }
    sourceSets {
        main.java.srcDir("${protobuf.generatedFilesBaseDir}/main/java")
    }
    apply plugin: "idea"
    idea {
        module {
            // mark proto directory as source root
            sourceDirs += sourceSets.main.proto.sourceDirectories
        }
    }

    // artifacts
    jar << {
        println "jar: ${archivePath}"
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allJava
        classifier = 'sources'
        doLast {
            println "sources: ${archivePath}"
        }
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
        doLast {
            println "sources: ${archivePath}"
        }
    }
    task('protoZip', type: Zip) {
        from sourceSets.main.proto
        classifier = 'proto'
    }

    apply plugin: "maven-publish"
    publishing {
        repositories {
            maven {
                name "oss"
                def ossBaseUrl = "https://oss.sonatype.org/content/repositories"
                url = project.hasProperty("release") ? "https://oss.sonatype.org/service/local/staging/deploy/maven2" : "$ossBaseUrl/snapshots"
                credentials {
                    username property("maven2.username")
                    password property("maven2.password")
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java

                if (project.hasProperty("release")) {
                    version = project.getVersion()
                } else {
                    version = project.getVersion() + "-SNAPSHOT"
                }

                artifact sourcesJar
                artifact javadocJar
                artifact protoZip

                pom {
                    name = 'TensorFlow4j'
                    description = 'A Java Library for Protobuf in TensorFlow and TensorFlow-Serving'
                    url = 'https://github.com/YuanWenqing/tensorflow4j'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'yuanwq'
                            name = 'YuanWenqing'
                            email = 'ywq8876@163.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com:YuanWenqing/tensorflow4j.git'
                        developerConnection = 'scm:git:ssh://github.com:YuanWenqing/tensorflow4j.git'
                        url = 'https://github.com/YuanWenqing/tensorflow4j'
                    }
                }
            }
        }
    }
    publish {
        doLast {
            def pub = publishing.publications.mavenJava
            println "artifact: ${pub.groupId}:${pub.artifactId}:${pub.version}"
            for (repo in publishing.repositories) {
                println "upload to ${repo.url}"
            }
        }
    }
    publishToMavenLocal {
        doLast {
            def pub = publishing.publications.mavenJava
            println "artifact: ${pub.groupId}:${pub.artifactId}:${pub.version}"
        }
    }
    task('local').dependsOn(publishToMavenLocal)

//    apply plugin: "signing"  // generate a signature file for each artifact
//    signing {
//        sign publishing.publications.mavenJava
//    }

}

project(":tensorflow-proto") {
    dependencies {
        api("com.google.protobuf:protobuf-java:$protobufJavaVersion")
        api("io.grpc:grpc-protobuf:$grpcVersion")
        api("io.grpc:grpc-stub:$grpcVersion")
    }
}
project(":serving-proto") {
    dependencies {
        protobuf(project(":tensorflow-proto"))

        api("com.google.protobuf:protobuf-java:$protobufJavaVersion")
        api("io.grpc:grpc-protobuf:$grpcVersion")
        api("io.grpc:grpc-stub:$grpcVersion")
    }
}
